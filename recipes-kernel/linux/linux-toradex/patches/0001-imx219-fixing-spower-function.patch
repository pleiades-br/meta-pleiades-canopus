From cd2a4491602a2940acee332978602896b2214a67 Mon Sep 17 00:00:00 2001
From: "Aluisio (ZyZy) Victal" <alvictal@gmail.com>
Date: Wed, 14 May 2025 19:09:33 +0000
Subject: [PATCH] imx219 fixing spower function

---
 drivers/media/i2c/imx219.c | 41 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)

diff --git a/drivers/media/i2c/imx219.c b/drivers/media/i2c/imx219.c
index b64535121104..e7c0236a9df1 100644
--- a/drivers/media/i2c/imx219.c
+++ b/drivers/media/i2c/imx219.c
@@ -449,6 +449,7 @@ static const struct imx219_mode supported_modes[] = {
 struct imx219 {
 	struct v4l2_subdev sd;
 	struct media_pad pad;
+    struct device *dev;
 
 	struct v4l2_mbus_framefmt fmt;
 
@@ -479,8 +480,11 @@ struct imx219 {
 
 	/* Streaming on/off */
 	bool streaming;
+    int power_count;
 };
 
+static int imx219_s_power(struct v4l2_subdev *sd, int on);
+
 static inline struct imx219 *to_imx219(struct v4l2_subdev *_sd)
 {
 	return container_of(_sd, struct imx219, sd);
@@ -1129,6 +1133,39 @@ static int imx219_power_off(struct device *dev)
 	return 0;
 }
 
+static int imx219_s_power(struct v4l2_subdev *sd, int on)
+{
+       struct imx219 *sensor = to_imx219(sd);
+       int ret = 0;
+
+       mutex_lock(&sensor->mutex);
+
+       /*
+       * If the power count is modified from 0 to != 0 or from != 0 to 0,
+       * update the power state.
+       */
+       if (sensor->power_count == !on) {
+               if (!!on) {
+                       imx219_power_on(sensor->dev);
+               }
+               else{
+                       imx219_power_off(sensor->dev);
+               }
+       }
+
+       /* Update the power count. */
+       sensor->power_count += on ? 1 : -1;
+       WARN_ON(sensor->power_count < 0);
+
+       mutex_unlock(&sensor->mutex);
+
+       if (on && !ret && sensor->power_count == 1) {
+               /* restore controls */
+               ret = v4l2_ctrl_handler_setup(&sensor->ctrl_handler);
+       }
+       return ret;
+}
+
 static int __maybe_unused imx219_suspend(struct device *dev)
 {
 	struct v4l2_subdev *sd = dev_get_drvdata(dev);
@@ -1198,7 +1235,10 @@ static int imx219_identify_module(struct imx219 *imx219)
 	return 0;
 }
 
+
+
 static const struct v4l2_subdev_core_ops imx219_core_ops = {
+    .s_power = imx219_s_power,
 	.subscribe_event = v4l2_ctrl_subdev_subscribe_event,
 	.unsubscribe_event = v4l2_event_subdev_unsubscribe,
 };
@@ -1417,6 +1457,7 @@ static int imx219_probe(struct i2c_client *client)
 	if (!imx219)
 		return -ENOMEM;
 
+    imx219->dev = &client->dev;
 	v4l2_i2c_subdev_init(&imx219->sd, client, &imx219_subdev_ops);
 
 	/* Check the hardware configuration in device tree */
-- 
2.25.1

